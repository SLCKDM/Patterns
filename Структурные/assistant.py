'''
Заместитель - это объект, который выступает прослойкой между клиентом и
реальным сервисным объектом. Заместитель получает вызовы от клиента, выполняет
свою функцию (контроль доступа, кэ=еширование, изменение запроса и прочее), а
затем передает вызовы сервисному объекту.

Заместитель имеет тот же интерфейс, что и реальным объект, поэтому для клиента
нет разницы - работать через заместителя или напрямую.

Применимость: Паттерн Заместитель применяется в Python коде тогда, когда надо
заменить объект его суррогатом, причём незаметно для клиентов настоящего
объекта. Это позволит выполнить какие-то добавочные поведения до или после
основного повередния настоящего объекта.

Признаки применения паттерна: Класс заместителя чаще всего делегирует всю
настоящую работу своему реальному объекту. Заместители часто сами следят за
жизненным циклом своего реального объекта.
'''

from abc import ABC, abstractmethod


class Subject(ABC):
    '''
    Интерфейс Субъекта объявляет общие операции как для Реального Субъекта, так
    и для Заместителя. Пока клиент работает с Реальным Субъектом, используя
    этот интерфейс, вы сможете передать ему заместителя вместо реального
    субъекта.
    '''

    @abstractmethod
    def request(self) -> None: ...


class RealSubject(Subject):
    """
    Реальный Субъект содержит некоторую базовую бизнес-логику. Как правило,
    Реальные Субъекты способны выполнять некоторую полезную работу, которая к
    тому же может быть очень медленной или точной - например, коррекция входных
    данных. Заместитель может решить эти задачи без каких-либо изменений в коде
    Реального субъекта.
    """

    def request(self) -> None:
        print("RealSubject: Handling request.")


class Proxy(Subject):
    """
    Интерфейся Заместителя идентичен интерфейсу Реального субъекта
    """

    def __init__(self, real_subject: RealSubject) -> None:
        self._real_subject = real_subject

    def request(self):
        """
        Наиболее распростарнёнными областями применения паттерна Заместитель
        являются ленивая загрузка, кэширование, контроль доступа, ведение
        журнала и т.д. Заместитель может выполнить одну из этих задач, а затем,
        в зависимости от результата, передать выполнение одноимённому методу в
        связанном объекта класса Реального Субъекта.
        """
        if self.check_access():
            self._real_subject.request()
            self.log_access()

    def check_access(self) -> bool:
        print('Proxy: Checking access prior to firing a real request')
        return True

    def log_access(self) -> None:
        print('Proxy: logging the time of request.', end='')


def client_code(subject: Subject):
    subject.request()

if __name__ == '__main__':
    print('Client: Executing the code with a real subject:')
    real_subject = RealSubject()
    client_code(real_subject)

    print('')

    print('Client: Executing the code with a real subject:')
    proxy = Proxy(real_subject)
    client_code(proxy)
